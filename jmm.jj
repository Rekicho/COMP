/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jmm.jj */
/*@egen*/options
{
	LOOKAHEAD=1;
	           
}

PARSER_BEGIN(jmm)

import java.io.*;

public class jmm/*@bgen(jjtree)*/implements jmmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTjmmState jjtree = new JJTjmmState();

/*@egen*/
	public static void printUsage() {
		System.out.println("Usage:  ");
		System.out.println("       java jmm <input_file.jmm>");
	}

	public static void main(String args[]) throws ParseException {
		if(args.length != 1) {
			printUsage();
			return;
		}
			
		FileInputStream file;
		try {
			file = new FileInputStream(args[0]);
		} catch (Exception e) {
			System.err.println("File " + args[0] + " not found");
			return;
		}
		
		jmm myjmm = new jmm(file);
		SimpleNode root = myjmm.Program(); // devolve refer\u00c3\u00aancia para o n\u00c3\u00b3 raiz da \u00c3\u00a1rvore

		root.dump(""); // imprime no ecr\u00c3\u00a3 a \u00c3\u00a1rvore
	}
}

PARSER_END(jmm)

// WHITE SPACE
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

// COMMENTS
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

// RESERVED
TOKEN :
{
  < BOOLEAN: "boolean" >
| < CLASS: "class" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < IF: "if" >
| < INT: "int" >
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < STRING: "String" >
| < THIS: "this" >
| < TRUE: "true" >
| < VOID: "void" >
| < WHILE: "while" >
}

// IDENTIFIER AND INTEGER
TOKEN : 
{
  < IDENTIFIER : (["A"-"Z","a"-"z","$","_"]) (["A"-"Z","a"-"z","0"-"9","$","_"])* >
| < INTEGERLITERAL: (["1"-"9"] (["0"-"9"])*) | ("0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+) | ("0" (["0"-"7"])*) >
}

// SEPARATORS
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

// OPERATORS
TOKEN : 
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < SC_AND: "&&" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
}

JAVACODE
void error_skipto(int kind) {/*@bgen(jjtree) error_skipto */
ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/
  ParseException e = generateParseException();  // generate the exception object.
  System.out.println(e.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
    // The above loop consumes tokens all the way up to a token of
    // "kind".  We use a do-while loop rather than a while because the
    // current token is the one immediately before the erroneous token
    // (in our case the token immediately before what should have been
    // "if"/"while".
}


SimpleNode Program(): {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
        try {
/*@egen*/
	ClassDeclaration() <EOF>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/
	  
	  {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ // c\u00c3\u00b3digo Java entre chavetas
}

void ClassDeclaration(): {/*@bgen(jjtree) ClassDeclaration */
                          ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) ClassDeclaration */
        try {
/*@egen*/
	"class" t1=<IDENTIFIER> {jjtn000.class_name = t1.image;} ["extends" t2=<IDENTIFIER> {jjtn000.extends_class = t2.image;}] "{" (VarDeclaration())* ("public" (MainDeclaration() | MethodDeclaration()))* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void VarDeclaration(): {/*@bgen(jjtree) VarDeclaration */
                        ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) VarDeclaration */
        try {
/*@egen*/
	Type() t=<IDENTIFIER> ";"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ {jjtn000.name = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MainDeclaration(): {/*@bgen(jjtree) MainDeclaration */
                         ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MainDeclaration */
        try {
/*@egen*/
	"static" "void" "main" "(" "String" "[" "]" t=<IDENTIFIER> ")" "{" {jjtn000.args = t.image;}
		(LOOKAHEAD(2) VarDeclaration())* (LOOKAHEAD(2) Statement())* "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void MethodDeclaration(): {/*@bgen(jjtree) MethodDeclaration */
                           ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MethodDeclaration */
        try {
/*@egen*/
	Type() t=<IDENTIFIER> {jjtn000.name = t.image;} "(" [Parameters()] ")" "{" 
		
	(LOOKAHEAD(2) VarDeclaration())* (LOOKAHEAD(2) Statement())* "return" Expression() ";" "}"/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Parameters(): {/*@bgen(jjtree) Parameters */
  ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parameters */
        try {
/*@egen*/
	Parameter() ("," Parameter())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Parameter(): {/*@bgen(jjtree) Parameter */
                   ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Parameter */
        try {
/*@egen*/
	Type() t=<IDENTIFIER>/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.name = t.image;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Type() : {/*@bgen(jjtree) Type */
               ASTType jjtn000 = new ASTType(JJTTYPE);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	( t="int" ["[" "]" {jjtn000.isArray = true;}] 
	| t="boolean" 
	| t=<IDENTIFIER>)/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {jjtn000.name = t.image;}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Statement(): {/*@bgen(jjtree) Statement */
                   ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Statement */
          try {
/*@egen*/
	  "{" (Statement())* "}"/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/  {jjtn000.type = "multiple";}
	| t="if" "(" Expression() ")" Statement() "else" Statement()/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/ {jjtn000.type = "if";}
	| t="while" try {"(" Expression() ")"} catch(ParseException e) { error_skipto(RPAREN); } Statement()/*@bgen(jjtree)*/
                                                                                                             {
                                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                                               jjtc000 = false;
                                                                                                             }
/*@egen*/ {jjtn000.type = "while";}
	| LOOKAHEAD(<IDENTIFIER> "[") t=<IDENTIFIER> ArrayAcc() "=" Expression() ";"/*@bgen(jjtree)*/
                                                                                     {
                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                       jjtc000 = false;
                                                                                     }
/*@egen*/ {jjtn000.type = "[]="; jjtn000.identifier = t.image;}
	| LOOKAHEAD(2) t=<IDENTIFIER> "=" Expression() ";"/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/ {jjtn000.type = "="; jjtn000.identifier = t.image;}
	| Expression() ";"/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void Expression()      : {}
{
	LT() (LOOKAHEAD(2) "&&"/*@bgen(jjtree) #AND( 2) */
                                {
                                  ASTAND jjtn001 = new ASTAND(JJTAND);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ LT()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/        )*
}

void LT()      : {}
{
	Sum() (LOOKAHEAD(2) "<"/*@bgen(jjtree) #LESS( 2) */
                                {
                                  ASTLESS jjtn001 = new ASTLESS(JJTLESS);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ Sum()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/         )* 
}

void Sum()      : {}
{
	Mult() (LOOKAHEAD(2) ("+"/*@bgen(jjtree) #ADD( 2) */
                                  {
                                    ASTADD jjtn001 = new ASTADD(JJTADD);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*/ Mult()/*@bgen(jjtree)*/
                                  } catch (Throwable jjte001) {
                                    if (jjtc001) {
                                      jjtree.clearNodeScope(jjtn001);
                                      jjtc001 = false;
                                    } else {
                                      jjtree.popNode();
                                    }
                                    if (jjte001 instanceof RuntimeException) {
                                      throw (RuntimeException)jjte001;
                                    }
                                    if (jjte001 instanceof ParseException) {
                                      throw (ParseException)jjte001;
                                    }
                                    throw (Error)jjte001;
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001,  2);
                                    }
                                  }
/*@egen*/         | "-"/*@bgen(jjtree) #SUB( 2) */
                                                       {
                                                         ASTSUB jjtn002 = new ASTSUB(JJTSUB);
                                                         boolean jjtc002 = true;
                                                         jjtree.openNodeScope(jjtn002);
                                                       }
                                                       try {
/*@egen*/ Mult()/*@bgen(jjtree)*/
                                                       } catch (Throwable jjte002) {
                                                         if (jjtc002) {
                                                           jjtree.clearNodeScope(jjtn002);
                                                           jjtc002 = false;
                                                         } else {
                                                           jjtree.popNode();
                                                         }
                                                         if (jjte002 instanceof RuntimeException) {
                                                           throw (RuntimeException)jjte002;
                                                         }
                                                         if (jjte002 instanceof ParseException) {
                                                           throw (ParseException)jjte002;
                                                         }
                                                         throw (Error)jjte002;
                                                       } finally {
                                                         if (jjtc002) {
                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                         }
                                                       }
/*@egen*/        ))*
}

void Mult()      : {}
{
	Literal() (LOOKAHEAD(2) ("*"/*@bgen(jjtree) #MULT( 2) */
                                     {
                                       ASTMULT jjtn001 = new ASTMULT(JJTMULT);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ Literal()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/          | "/"/*@bgen(jjtree) #DIV( 2) */
                                                              {
                                                                ASTDIV jjtn002 = new ASTDIV(JJTDIV);
                                                                boolean jjtc002 = true;
                                                                jjtree.openNodeScope(jjtn002);
                                                              }
                                                              try {
/*@egen*/ Literal()/*@bgen(jjtree)*/
                                                              } catch (Throwable jjte002) {
                                                                if (jjtc002) {
                                                                  jjtree.clearNodeScope(jjtn002);
                                                                  jjtc002 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte002 instanceof RuntimeException) {
                                                                  throw (RuntimeException)jjte002;
                                                                }
                                                                if (jjte002 instanceof ParseException) {
                                                                  throw (ParseException)jjte002;
                                                                }
                                                                throw (Error)jjte002;
                                                              } finally {
                                                                if (jjtc002) {
                                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                                }
                                                              }
/*@egen*/        ))*
}

void Literal() : {/*@bgen(jjtree) Literal */
                  ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  t=<INTEGERLITERAL> OtherLiteral()/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ {jjtn000.identifier = t.image;}
	| "true" OtherLiteral()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {jjtn000.identifier = "true";}
	| "false" OtherLiteral()/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, true);
                                   jjtc000 = false;
                                 }
/*@egen*/ {jjtn000.identifier = "false";}
	| t=<IDENTIFIER> OtherLiteral()/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ {jjtn000.identifier = t.image;}
	| "this" OtherLiteral()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {jjtn000.identifier = "this";}
	| "new" ((t="int" ArrayAcc() OtherLiteral()/*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn000, true);
                                                      jjtc000 = false;
                                                    }
/*@egen*/ {jjtn000.identifier = "new int[...]";}) | (t=<IDENTIFIER> "(" ")" OtherLiteral()/*@bgen(jjtree)*/
                                                                                                                                     {
                                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                       jjtc000 = false;
                                                                                                                                     }
/*@egen*/ {jjtn000.identifier = "new " + t.image;}))
	| t="!" Expression() OtherLiteral()/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ {jjtn000.identifier = "!";}
	| "(" Expression() ")" OtherLiteral()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void OtherLiteral()      : {Token t;}
{
	ArrayAcc() OtherLiteral()/*@bgen(jjtree) OtherLiteral */
                                  {
                                    ASTOtherLiteral jjtn001 = new ASTOtherLiteral(JJTOTHERLITERAL);
                                    boolean jjtc001 = true;
                                    jjtree.openNodeScope(jjtn001);
                                  }
                                  try {
/*@egen*//*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtc001 = false;
                                  }
/*@egen*/ {jjtn001.type = "[]";}/*@bgen(jjtree)*/
                                  } finally {
                                    if (jjtc001) {
                                      jjtree.closeNodeScope(jjtn001, true);
                                    }
                                  }
/*@egen*/              
	| "." (("length" OtherLiteral()/*@bgen(jjtree) OtherLiteral */
                                        {
                                          ASTOtherLiteral jjtn002 = new ASTOtherLiteral(JJTOTHERLITERAL);
                                          boolean jjtc002 = true;
                                          jjtree.openNodeScope(jjtn002);
                                        }
                                        try {
/*@egen*//*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn002, true);
                                          jjtc002 = false;
                                        }
/*@egen*/ {jjtn002.type = "length";}/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc002) {
                                            jjtree.closeNodeScope(jjtn002, true);
                                          }
                                        }
/*@egen*/              ) | (t=<IDENTIFIER> "(" [ MethodParams() ] ")" OtherLiteral()/*@bgen(jjtree) OtherLiteral */
                                                                                                                                              {
                                                                                                                                                ASTOtherLiteral jjtn003 = new ASTOtherLiteral(JJTOTHERLITERAL);
                                                                                                                                                boolean jjtc003 = true;
                                                                                                                                                jjtree.openNodeScope(jjtn003);
                                                                                                                                              }
                                                                                                                                              try {
/*@egen*//*@bgen(jjtree)*/
                                                                                                                                              {
                                                                                                                                                jjtree.closeNodeScope(jjtn003, true);
                                                                                                                                                jjtc003 = false;
                                                                                                                                              }
/*@egen*/ {jjtn003.type = "call"; jjtn003.identifier = t.image;}/*@bgen(jjtree)*/
                                                                                                                                              } finally {
                                                                                                                                                if (jjtc003) {
                                                                                                                                                  jjtree.closeNodeScope(jjtn003, true);
                                                                                                                                                }
                                                                                                                                              }
/*@egen*/              ))
	| {}
}

void MethodParams(): {/*@bgen(jjtree) MethodParams */
  ASTMethodParams jjtn000 = new ASTMethodParams(JJTMETHODPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodParams */
        try {
/*@egen*/
	Expression() ( "," Expression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ArrayAcc()      : {}
{
  "[" Expression() "]"	
}