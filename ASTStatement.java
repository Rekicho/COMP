/* Generated By:JJTree: Do not edit this line. ASTStatement.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTStatement extends SimpleNode {
	String type = "";
	String identifier = "";
	static int labels = 0;

  public ASTStatement(int id) {
    super(id);
  }

  public ASTStatement(jmm p, int id) {
    super(p, id);
  }

  public String toString() {
    switch(type){
		case "multiple": return "Multiple Statements";
		case "if": return "if...else";
		case "while": return "while";
		case "[]=": return identifier + "[...]=";
		case "=": return identifier + " =";
	}

	return "Statement";
  }

	public void generateCode(StringBuilder builder, SymbolTable ST, String functionName) {
		System.out.println(type);
		if(type.equals("if")) {
			int label = labels;
			labels++;
			((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
			builder.append("ifeq ELSE" + label + "\n");
			((SimpleNode)children[1]).generateCode(builder, ST, functionName);
			builder.append("goto ENDIF" + label + "\nELSE" + label + ":\n");
			((SimpleNode)children[2]).generateCode(builder, ST, functionName);
			builder.append("ENDIF" + label + ":\n");
			return;
		}

		if(type.equals("while")) {
			int label = labels;
			labels++;
			builder.append("WHILE" + label + ":\n");
			((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
			builder.append("ifeq ENDWHILE" + label + "\n");
			((SimpleNode)children[1]).generateCode(builder, ST, functionName);
			builder.append("goto WHILE" + label + "\nENDWHILE" + label + ":\n");

			return;
		}

		super.generateCode(builder,ST,functionName);
	}

}
/* JavaCC - OriginalChecksum=2405f96baf2205473865575b3fc06196 (do not edit this line) */
