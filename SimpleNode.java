
/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

public class SimpleNode implements Node {

	protected Node parent;
	protected Node[] children;
	protected int id;
	protected Object value;
	protected jmm parser;
	int lineNumber;

	public SimpleNode(int i) {
		id = i;
	}

	public SimpleNode(jmm p, int i) {
		this(i);
		parser = p;
	}

	public void jjtOpen() {
	}

	public void jjtClose() {
	}

	public void jjtSetParent(Node n) {
		parent = n;
	}

	public Node jjtGetParent() {
		return parent;
	}

	public void jjtAddChild(Node n, int i) {
		if (children == null) {
			children = new Node[i + 1];
		} else if (i >= children.length) {
			Node c[] = new Node[i + 1];
			System.arraycopy(children, 0, c, 0, children.length);
			children = c;
		}
		children[i] = n;
	}

	public Node jjtGetChild(int i) {
		return children[i];
	}

	public int jjtGetNumChildren() {
		return (children == null) ? 0 : children.length;
	}

	public void jjtSetValue(Object value) {
		this.value = value;
	}

	public Object jjtGetValue() {
		return value;
	}

	/*
	 * You can override these two methods in subclasses of SimpleNode to customize
	 * the way the node appears when the tree is dumped. If your output uses more
	 * than one line you should override toString(String), otherwise overriding
	 * toString() is probably all you need to do.
	 */

	public String toString() {
		return jmmTreeConstants.jjtNodeName[id];
	}

	public String toString(String prefix) {
		return prefix + toString();
	}

	/*
	 * Override this method if you want to customize how the node dumps out its
	 * children.
	 */

	public void dump(String prefix) {
		System.out.println(toString(prefix));
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.dump(prefix + " ");
				}
			}
		}
	}

	public int getId() {
		return id;
	}

	public void fixMethodCalls() {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.fixMethodCalls();
				}
			}
		}
	}

	public void buildST(SymbolTable table, String functionName) throws Exception {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.buildST(table,functionName);
				}
			}
		}
	}

	public String semanticAnalysis(SymbolTable table, String functionName) throws Exception {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.semanticAnalysis(table,functionName);
				}
			}
		}

		return "";
	}

	public void generateCode(StringBuilder builder, SymbolTable ST, String functionName) {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.generateCode(builder,ST,functionName);
				}
			}
		}
	}

	public void generateFunctionCode(StringBuilder builder, SymbolTable ST, String functionName) {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.generateFunctionCode(builder,ST,functionName);
				}
			}
		}
	}

	public boolean isStore(int limit) {
		int i = 0;
		SimpleNode parentNode = (SimpleNode) parent;
		for(;parentNode != null; parentNode = (SimpleNode) parentNode.parent) {
			if(parentNode instanceof ASTStatement) {
				ASTStatement statement = (ASTStatement) parentNode;

				if(statement.type.equals(""))
					return false;
	
				else return true;
			}

			if(parentNode instanceof ASTOtherLiteral) {
				i++;
				
				if(i > limit)
					return true;
			}
		}

		return true;
	}
}

/*
 * JavaCC - OriginalChecksum=6ff9a611f5ad6bf6011fee792f3ff742 (do not edit this
 * line)
 */
