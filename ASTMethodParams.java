/* Generated By:JJTree: Do not edit this line. ASTMethodParams.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
import java.util.Iterator;

public
class ASTMethodParams extends SimpleNode {
  public ASTMethodParams(int id) {
    super(id);
  }

  public ASTMethodParams(jmm p, int id) {
    super(p, id);
  }

  public String[] getParams(SymbolTable table, String functionName) throws Exception {
      String[] res = new String[children.length];

      for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				res[i] = n.semanticAnalysis(table,functionName);
			}

      return res;
  }

  public void generateCode(StringBuilder builder, SymbolTable ST, String functionName) {
    ASTOtherLiteral parentNode = (ASTOtherLiteral) parent;
	ASTLiteral parentparentNode = (ASTLiteral) parentNode.parent;

    if (parentNode.type.equals("call")) {
		Symbol symbol = null;

      if(parentparentNode.identifier.equals("this")) {
        builder.append("aload_0\n");
	  }

		else if(functionName != null && (symbol = ST.functions.get(functionName).params.get(parentparentNode.identifier)) != null && symbol.type.equals(ST.className)) {
			builder.append("aload_" + symbol.order + "\n");
		}

		else if(functionName != null && (symbol = ST.functions.get(functionName).locals.get(parentparentNode.identifier)) != null && symbol.type.equals(ST.className)) {
			builder.append("aload_" + symbol.order + "\n");
		}

		else if((symbol = ST.functions.get(functionName).locals.get(parentparentNode.identifier)) != null && symbol.type.equals(ST.className)) {
			builder.append("aload_0\ngetfield " + ST.className + "/" + parentNode.identifier + "\n");
		}

      else if(parentparentNode.identifier.contains("new")) {
        String className = parentparentNode.identifier.split("new ")[1];

        builder.append("new " + className + "\ndup\ninvokespecial " + className + "/<init>()V\n");
      }

	//   else if(parentparentNode.identifier.contains("ioPlus"))
	//   	builder.append("getstatic " + parentparentNode.identifier + "V;\n");

		  
	// 	else builder.append("getstatic java/lang/" + parentparentNode.identifier + "V;\n");

		if (children != null) {
			for (int i = children.length - 1; i >= 0; i--) {
				((SimpleNode) children[i]).generateFunctionCode(builder, ST, functionName);
			}
		}
      
      if(parentparentNode.identifier.equals("this") || parentparentNode.identifier.equals("new " + ST.className) || (symbol != null && symbol.type.equals(ST.className)))
			{
        builder.append("invokevirtual " + ST.className + "/" + parentNode.identifier + "(");

        Iterator<Symbol> it = ST.functions.get(parentNode.identifier).params.values().iterator();

        while(it.hasNext()) {
          String type = it.next().type;

          if(type.equals(ST.className))
            builder.append("L" + type);

          else if(type.equals("boolean"))
            builder.append("Z");

          else if(type.equals("int"))
			builder.append("I");
			
		  else if(type.equals("int[]"))
            builder.append("[I");
          
          else builder.append("Ljava/lang/" + type);

          builder.append(";");
        }

        builder.append(")");

				if(ST.functions.get(parentNode.identifier).returnType.equals("boolean"))
					builder.append("Z");

				else if(ST.functions.get(parentNode.identifier).returnType.equals("int"))
					builder.append("I" );

				else if(ST.functions.get(parentNode.identifier).returnType.equals("int"))
					builder.append("[I" );

        else if(ST.functions.get(parentNode.identifier).returnType.equals(ST.className))
          builder.append("L" + ST.className);

        else builder.append("Ljava/lang/" + parentNode.identifier);

        builder.append(";\n");
      }

      else {
        if(parentparentNode.identifier.contains("new ")) {
          String function = parentparentNode.identifier.split("new ")[1];
          builder.append("invokevirtual " + function + "/" + parentNode.identifier + "(");
        }
          
		else if(parentparentNode.identifier.contains("ioPlus"))
			builder.append("invokestatic " + parentparentNode.identifier + "." + parentNode.identifier + "(");

		else builder.append("invokestatic java/lang/" + parentparentNode.identifier + "." + parentNode.identifier + "(");
		
        for (int i = children.length - 1; i >= 0; i--) {
          try{
            String type = ((SimpleNode) children[i]).semanticAnalysis(ST, functionName);

            if(type.equals("boolean"))
            builder.append("Z");
  
            else if(type.equals("int"))
			  builder.append("I" );
			  
			else if(type.equals("int[]"))
              builder.append("[I" );

            else if(type.equals(ST.className))
              builder.append("L" + ST.className);

            else builder.append("Ljava/lang/" + ((ASTLiteral) children[i]).identifier);

          } catch(Exception e){};

          builder.append(";");
				}
        builder.append(")V;\n");
      }
    }
	}  
}
/* JavaCC - OriginalChecksum=0d0f34f346a0ba514d6b41b522453a82 (do not edit this line) */
