/* Generated By:JJTree: Do not edit this line. ASTClassDeclaration.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTClassDeclaration extends SimpleNode {

  String class_name = "";
  String extends_class = "";

  public ASTClassDeclaration(int id) {
    super(id);
  }

  public ASTClassDeclaration(jmm p, int id) {
    super(p, id);
  }

  public String toString() {
    return "class: " + class_name + (extends_class.equals("") ? "" : ("extends" + extends_class));
  }

  public void buildST(SymbolTable table, String functionName) throws Exception {
	table.className = class_name;

	if (children != null) {
		for (int i = 0; i < children.length; ++i) {
			SimpleNode n = (SimpleNode) children[i];
			if (n != null) {
				try{
          n.buildST(table, functionName);
        }
        catch(Exception e){
          System.out.println(e.getMessage());
        }
			}
		}
	}
  }
  
  public String semanticAnalysis(SymbolTable table, String functionName) throws Exception {
		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
          try{
            n.semanticAnalysis(table,functionName);
          }  
          catch(Exception e){
            System.out.println(e.getMessage());
          }
				}
			}
		}

		return "";
	}

	public void generateCode(StringBuilder builder, SymbolTable ST, String functionName) {
		builder.append(".class public " + class_name + "\n.super ");

		if(!extends_class.equals(""))
			builder.append(extends_class + "\n");

		else builder.append("java/lang/Object\n");

		builder.append("\n; standard initializer\n.method public <init>()V\n aload_0\n");

		if(!extends_class.equals(""))
			builder.append("invokenonvirtual " + extends_class + "/<init>()V\n");

		else builder.append("invokenonvirtual java/lang/Object/<init>()V\n");

		builder.append("return\n.end method\n\n");

		if (children != null) {
			for (int i = 0; i < children.length; ++i) {
				SimpleNode n = (SimpleNode) children[i];
				if (n != null) {
					n.generateCode(builder,ST,functionName);
				}
			}
		}
	}
}
/* JavaCC - OriginalChecksum=accd6c615f837a4f4156eee86c99e791 (do not edit this line) */
