/* Generated By:JJTree: Do not edit this line. ASTStatement.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package ast;

import jmm.*;

public
class ASTStatement extends SimpleNode {
	public String type = "";
	public String identifier = "";
	static int labels = 0;
	boolean needsCode = true;

  public ASTStatement(int id) {
    super(id);
  }

  public ASTStatement(jmm p, int id) {
    super(p, id);
  }

  public String toString() {
    switch(type){
		case "multiple": return "Multiple Statements";
		case "if": return "if...else";
		case "while": return "while";
		case "[]=": return identifier + "[...]=";
		case "=": return identifier + " =";
	}

	return "Statement";
  }

	public void generateCode(StringBuilder builder, SymbolTable ST, String functionName) {
		if(!needsCode)
			return;

		if(type.equals("multiple")) {
			super.generateCode(builder,ST,functionName);
			return;
		}
		if(type.equals("if")) {
			int label = labels;
			labels++;
			((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
			builder.append("ifeq ELSE" + label + "\n");
			((SimpleNode)children[1]).generateCode(builder, ST, functionName);
			builder.append("goto ENDIF" + label + "\nELSE" + label + ":\n");
			((SimpleNode)children[2]).generateCode(builder, ST, functionName);
			builder.append("ENDIF" + label + ":\n");
			return;
		}

		if(type.equals("while")) {
			int label = labels;
			labels++;
			((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
			builder.append("ifeq ENDWHILE" + label + "\nWHILE" + label + ":\n");
			((SimpleNode)children[1]).generateCode(builder, ST, functionName);
			((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
			builder.append("ifne WHILE" + label + "\nENDWHILE" + label + ":\n");

			return;
		}

		if(type.equals("=")) {
			if(identifier.equals("this")) {
				((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
				builder.append("astore_0\n");
			} else {
				Symbol symbol;
				if ((symbol = ST.functions.get(functionName).locals.get(identifier)) != null) {
					((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
					if(symbol.type.equals("int") || symbol.type.equals("boolean"))
						builder.append("istore " + symbol.order + "\n");
					else builder.append("astore " + symbol.order + "\n");
				}
				else if ((symbol = ST.functions.get(functionName).params.get(identifier)) != null) {
					((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
					if(symbol.type.equals("int") || symbol.type.equals("boolean"))
						builder.append("istore " + symbol.order + "\n");
					else builder.append("astore " + symbol.order + "\n");
				}
				else if((symbol = ST.symbols.get(identifier)) != null) {
					builder.append("aload_0\n");

					((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);

					if(symbol.type.equals("boolean"))
						builder.append("putfield " + ST.className + "/" + identifier + " Z" );
	
					else if(symbol.type.equals("int"))
						builder.append("putfield " + ST.className + "/" + identifier + " I" );

					else if(symbol.type.equals("int[]"))
						builder.append("putfield " + ST.className + "/" + identifier + " [I" );
	
					else builder.append("putfield " + ST.className + "/" + identifier + " L" );

					builder.append("\n");
				} 
			}

			return;
		}

		if(type.equals("[]=")) {
			Symbol symbol;
			if ((symbol = ST.functions.get(functionName).locals.get(identifier)) != null) {
				builder.append("aload " + symbol.order + "\n");
				
				((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
				((SimpleNode)children[1]).generateFunctionCode(builder, ST, functionName);

				builder.append("iastore\n");
			}
			else if ((symbol = ST.functions.get(functionName).params.get(identifier)) != null) {
				builder.append("aload " + symbol.order + "\n");

				((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
				((SimpleNode)children[1]).generateFunctionCode(builder, ST, functionName);

				builder.append("iastore\n");
			}
			else if((symbol = ST.symbols.get(identifier)) != null) {
				builder.append("aload_0\n");

				if(symbol.type.equals("boolean"))
					builder.append("getfield " + ST.className + "/" + identifier + " Z" );

				else if(symbol.type.equals("int"))
					builder.append("getfield " + ST.className + "/" + identifier + " I" );

				else if(symbol.type.equals("int[]"))
					builder.append("getfield " + ST.className + "/" + identifier + " [I" );

				else builder.append("getfield " + ST.className + "/" + identifier + " L" );

				builder.append("\n");

				((SimpleNode)children[0]).generateFunctionCode(builder, ST, functionName);
				((SimpleNode)children[1]).generateFunctionCode(builder, ST, functionName);
	
				builder.append("iastore\n");
			}
			return;
		}

		super.generateFunctionCode(builder,ST,functionName);
	}

	public void buildST(SymbolTable table, String functionName) throws Exception {
		super.buildST(table,functionName);

		Symbol symbol;

		if(!type.equals("=") || (symbol = table.functions.get(functionName).locals.get(identifier)) == null)
			return;

		symbol.defs++;
	}

	public void optimizeO(SymbolTable ST, String functionName) {
		if(functionName == null)
			return;
		
		if(type.equals("multiple")) {
			super.optimizeO(ST,functionName);
			return;
		}

		if(type.equals("=") && children != null && children.length == 1 && children[0] instanceof ASTLiteral) {	
			Symbol symbol;

			if((symbol = ST.functions.get(functionName).locals.get(identifier)) == null)
				return;

			if(symbol.defs > 1)
				return;

			ASTLiteral child = (ASTLiteral) children[0];

			if (Character.isDigit(child.identifier.charAt(0)) || child.identifier.equals("this") || child.identifier.equals("true") || child.identifier.equals("false")) {
				symbol.var_value = child.identifier;
				needsCode = false;
				symbol.needsCode = false;
			}
		}
	}
}
/* JavaCC - OriginalChecksum=2405f96baf2205473865575b3fc06196 (do not edit this line) */
