/* Generated By:JJTree: Do not edit this line. ASTLiteral.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTLiteral extends SimpleNode {
	String identifier = "";

  public ASTLiteral(int id) {
    super(id);
  }

  public ASTLiteral(jmm p, int id) {
    super(p, id);
  }

  public String toString(){
	return "Expression: " + identifier;
  }

  public String analyseVariables(SymbolTable table, String functionName, String type) throws Exception {
	if(type.contains("[]")){
		if(children == null || children.length == 0)
			return type;

		SimpleNode n = (SimpleNode) children[0];

		String childrenType;

		if((childrenType = n.semanticAnalysis(table,functionName)).equals("[]"))
			return type;	

		return childrenType;
	}

	return type;
  }
  
  public String semanticAnalysis(SymbolTable table, String functionName) throws Exception {
	super.semanticAnalysis(table, functionName);
	
	if(Character.isDigit(identifier.charAt(0)))
		return "int";

	if(identifier.equals("true") || identifier.equals("false"))
		return "boolean";

	if(identifier.equals("this"))
		return table.className;

	if(identifier.equals("!")) {
		SimpleNode n = (SimpleNode) children[0];

		if(n.semanticAnalysis(table,functionName) != "boolean")
			throw new Exception("Boolean Expression expected after '!'.");
		
		return "boolean";
	}

	if(identifier.equals("")) {
		SimpleNode n = (SimpleNode) children[0];

		return n.semanticAnalysis(table,functionName);
	}

	if(identifier.equals("new int[...]")) {
		SimpleNode n = (SimpleNode) children[0];

		if(n.semanticAnalysis(table,functionName) != "int")
			throw new Exception("Integer Expression expected inside [].");
			
		return "int[]";
	}

	else if(identifier.length() >= 3 && identifier.substring(0,3).equals("new")) {
		return identifier.substring(4);
	}

	if(functionName != null) {
		if(table.functions.get(functionName).locals.containsKey(identifier))
			return analyseVariables(table,functionName,table.functions.get(functionName).locals.get(identifier).type);
			
		if(table.functions.get(functionName).params.containsKey(identifier))
			return analyseVariables(table,functionName,table.functions.get(functionName).params.get(identifier).type);
	}

	if(table.symbols.containsKey(identifier))
		return analyseVariables(table,functionName,table.symbols.get(identifier).type);

	if(table.functions.containsKey(identifier))
		return analyseVariables(table,functionName,table.functions.get(identifier).returnType);

	throw new Exception("Identifier '" + identifier + "' not found.");
  }

  boolean isArray(SymbolTable table, String functionName) throws Exception{
	if(Character.isDigit(identifier.charAt(0)))
		return false;

	if(identifier.equals("true") || identifier.equals("false") || identifier.equals("this") || identifier.equals("!"))
		return false;

	if(identifier.equals("new int[...]"))
		return true;

	if(identifier.length() >= 3 && identifier.substring(0,3).equals("new"))
		return false;

	if(identifier.equals("")) {
		SimpleNode n = (SimpleNode) children[0];

		return n.semanticAnalysis(table,functionName).contains("[]");
	}

	if(functionName != null) {
		if(table.functions.get(functionName).locals.containsKey(identifier))
			return table.functions.get(functionName).locals.get(identifier).type.contains("[]");
			
		if(table.functions.get(functionName).params.containsKey(identifier))
			return table.functions.get(functionName).params.get(identifier).type.contains("[]");
	}

	if(table.symbols.containsKey(identifier))
		return table.symbols.get(identifier).type.contains("[]");

	if(table.functions.containsKey(identifier))
		return table.functions.get(identifier).returnType.contains("[]");


	return false;	
  }
  
}
/* JavaCC - OriginalChecksum=a8d48e9a57e0088d4ff5320e922f78d0 (do not edit this line) */
