/* Generated By:JJTree: Do not edit this line. ASTLiteral.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTLiteral extends SimpleNode {
	String identifier = "";

  public ASTLiteral(int id) {
    super(id);
  }

  public ASTLiteral(jmm p, int id) {
    super(p, id);
  }

  public String toString(){
	return "Expression: " + identifier;
  }
  
  public String semanticAnalysis(SymbolTable table, String functionName) throws Exception {
	if(Character.isDigit(identifier.charAt(0))) {
		if(children.length != 0)
			throw new Exception("Expression found after IntegerLiteral '" + identifier + "'.");

		return "int";
	}	

	if(identifier.equals("true") || identifier.equals("false")) {
		if(children.length != 0)
			throw new Exception("Expression found after '" + identifier + "'.");

		return "boolean";
	}

	if(identifier.equals("this")) {
		if(children.length != 0)
			throw new Exception("Expression found after 'this'.");

		return table.className;
	}

	if(identifier.equals("!")) {
		if(children.length != 1)
			throw new Exception("1 Expression expected after '!'." + children.length + " found.");

		SimpleNode n = (SimpleNode) children[0];

		if(n.semanticAnalysis(table,functionName) != "boolean")
			throw new Exception("Boolean Expression expected after '!'.");
		
		return "boolean";
	}

	if(identifier.equals("")) {
		if(children.length != 1)
			throw new Exception("Expression expected inside '()'." + children.length + " found.");

		SimpleNode n = (SimpleNode) children[0];

		return n.semanticAnalysis(table,functionName);
	}

	if(identifier.equals("new int[...]")) {
		if(children.length != 1)
			throw new Exception("Expression expected inside '()'." + children.length + " found.");

			SimpleNode n = (SimpleNode) children[0];

		if(n.semanticAnalysis(table,functionName) != "int")
			throw new Exception("Integer Expression expected after '!'.");
			
			return "int[]";
	}

	else if(identifier.substring(0,3).equals("new")) {
		if(children.length != 0)
			throw new Exception("Expression found after 'new " + identifier + "()'.");

		return identifier.substring(4);
	}

	if(functionName != null) {
		if(table.functions.get(functionName).locals.contains(identifier))
			return table.functions.get(functionName).locals.get(identifier).type;

		if(table.functions.get(functionName).params.contains(identifier))
			return table.functions.get(functionName).params.get(identifier).type;
	}

	if(table.symbols.contains(identifier))
		return table.symbols.get(identifier).type;

	if(table.functions.contains(identifier))
		return table.functions.get(identifier).returnType;

	throw new Exception("Identifier '" + identifier + "' not found.");
  }
  
}
/* JavaCC - OriginalChecksum=a8d48e9a57e0088d4ff5320e922f78d0 (do not edit this line) */
