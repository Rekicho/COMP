class Life {

    int UNDERPOP_LIM;
    int OVERPOP_LIM;
    int REPRODUCE_NUM;

    int LOOPS_PER_MS;

    int xMax;
    int yMax;
    int[] fiel;

    public static void main(String[] a) {
		Life l;
		int unused;

		l = new Life();
		l.init();

        while (true) {
            l.printfiel();
            l.update();
            unused = io.read();
        }

    }

    public boolean init() {
        int[] lineLenA;
        int lineLen;

        lineLenA = new int[1];

        /* "Static" variables */
        UNDERPOP_LIM = 2;
        OVERPOP_LIM = 3;
        REPRODUCE_NUM = 3;

        LOOPS_PER_MS = 225000;

        /* Instance variables */
        fiel = this.fiel(lineLenA);
        lineLen = lineLenA[0];

        xMax = lineLen - 1;
        yMax = fiel.length / lineLen - 1;

        return true;
    }

    /* Change this! 
     * (might want to write a script 
     * to autogenerate every assignment...)
     *
     * lineLen is "pass by reference",
     * and we modify it to return (e.g. time_t *time)
     */
    public int[] fiel(int[] lineLen) {
        int[] fiel;

        fiel = new int[100];
        lineLen[0] = 10;

        fiel[0] = 0;
        fiel[1] = 0;
        fiel[2] = 1;
        fiel[3] = 0;
        fiel[4] = 0;
        fiel[5] = 0;
        fiel[6] = 0;
        fiel[7] = 0;
        fiel[8] = 0;
        fiel[9] = 0;
        fiel[10] = 1;
        fiel[11] = 0;
        fiel[12] = 1;
        fiel[13] = 0;
        fiel[14] = 0;
        fiel[15] = 0;
        fiel[16] = 0;
        fiel[17] = 0;
        fiel[18] = 0;
        fiel[19] = 0;
        fiel[20] = 0;
        fiel[21] = 1;
        fiel[22] = 1;
        fiel[23] = 0;
        fiel[24] = 0;
        fiel[25] = 0;
        fiel[26] = 0;
        fiel[27] = 0;
        fiel[28] = 0;
        fiel[29] = 0;
        fiel[30] = 0;
        fiel[31] = 0;
        fiel[32] = 0;
        fiel[33] = 0;
        fiel[34] = 0;
        fiel[35] = 0;
        fiel[36] = 0;
        fiel[37] = 0;
        fiel[38] = 0;
        fiel[39] = 0;
        fiel[40] = 0;
        fiel[41] = 0;
        fiel[42] = 0;
        fiel[43] = 0;
        fiel[44] = 0;
        fiel[45] = 0;
        fiel[46] = 0;
        fiel[47] = 0;
        fiel[48] = 0;
        fiel[49] = 0;
        fiel[50] = 0;
        fiel[51] = 0;
        fiel[52] = 0;
        fiel[53] = 0;
        fiel[54] = 0;
        fiel[55] = 0;
        fiel[56] = 0;
        fiel[57] = 0;
        fiel[58] = 0;
        fiel[59] = 0;
        fiel[60] = 0;
        fiel[61] = 0;
        fiel[62] = 0;
        fiel[63] = 0;
        fiel[64] = 0;
        fiel[65] = 0;
        fiel[66] = 0;
        fiel[67] = 0;
        fiel[68] = 0;
        fiel[69] = 0;
        fiel[70] = 0;
        fiel[71] = 0;
        fiel[72] = 0;
        fiel[73] = 0;
        fiel[74] = 0;
        fiel[75] = 0;
        fiel[76] = 0;
        fiel[77] = 0;
        fiel[78] = 0;
        fiel[79] = 0;
        fiel[80] = 0;
        fiel[81] = 0;
        fiel[82] = 0;
        fiel[83] = 0;
        fiel[84] = 0;
        fiel[85] = 0;
        fiel[86] = 0;
        fiel[87] = 0;
        fiel[88] = 0;
        fiel[89] = 0;
        fiel[90] = 0;
        fiel[91] = 0;
        fiel[92] = 0;
        fiel[93] = 0;
        fiel[94] = 0;
        fiel[95] = 0;
        fiel[96] = 0;
        fiel[97] = 0;
        fiel[98] = 0;
        fiel[99] = 0;

        return fiel;

    }

    public boolean update() {
        int i;
        int cur;
        int neighN;
        boolean goodPop;
        int[] newfiel;

        newfiel = new int[fiel.length];

        i = 0;
        while (i < fiel.length) {
            cur = fiel[i];
            neighN = this.getLiveNeighborN(i);
            

            // Live cell
            if (!(cur < 1)) {
                goodPop = this.ge(neighN,UNDERPOP_LIM) && this.le(neighN,OVERPOP_LIM);
                if (!goodPop) {
                    newfiel[i] = 0;
                } else {
                    newfiel[i] = fiel[i];
                }
            }
            // Dead cell
            else {
                if (this.eq(neighN,REPRODUCE_NUM)) {
                    newfiel[i] = 1;
                } else {
                    newfiel[i] = fiel[i];
                }
            }

            i = i + 1;
        }

        fiel = newfiel;
        return true;

    }

    public boolean printfiel() {

        int i;
        int j;

        i = 0;
        j = 0;
        while (i < fiel.length) {
            if (this.gt(j,xMax)) {
                io.println();
                j = 0;
            }
            else {}
            io.print(fiel[i]);

            i = i + 1;
            j = j + 1;
        }

        io.println();
        io.println();
        return true;

    }

    public int trIdx(int x, int y) {
        return x + (xMax + 1) * y;
    }

    public int[] cartIdx(int absPos) {
        int x;
        int y;
        int xLim;
        int[] ret;

        xLim = xMax + 1;

        y = absPos / xLim;
        x = absPos - y * xLim;

        ret = new int[2];
        ret[0] = x;
        ret[1] = y;

        return ret;

    }

    public int[] getNeighborCoords(int absPos) {
        int x;
        int y;

        int upX;
        int upY;
        int downX;
        int downY;

        int[] cart;
		int[] ret;

        cart = this.cartIdx(absPos);
        x = cart[0];
		y = cart[1];

        if (x < xMax) {
			downX = x + 1;
            if (this.gt(x,0))
                upX = x - 1;
            else
				upX = xMax;
			io.print(upX);
			io.print(downX);
        } else {
            downX = 0;
            upX = x - 1;
        }

        if (y < yMax) {
            downY = y + 1;
            if (this.gt(y,0))
                upY = y - 1;
            else
                upY = yMax;
        } else {
            downY = 0;
            upY = y - 1;
        }

        ret = new int[8];
		// Clockwise from N
		ret[0] = this.trIdx(x, upY);
        ret[1] = this.trIdx(upX, upY);
        ret[2] = this.trIdx(upX, y);
        ret[3] = this.trIdx(upX, downY);
        ret[4] = this.trIdx(x, downY);
        ret[5] = this.trIdx(downX, downY);
        ret[6] = this.trIdx(downX, y);
		ret[7] = this.trIdx(downX, upY);

        return ret;

    }

    public int getLiveNeighborN(int absPos) {
        int[] neigh;
        int i;
        int ret;

		ret = 0;

		neigh = this.getNeighborCoords(absPos);

        i = 0;
        while (i < neigh.length) {
            if (this.ne(fiel[neigh[i]],0))
                ret = ret + 1;
            else {
            }

            i = i + 1;
        }

        return ret;
    }

    public boolean busyWait(int ms) {
        int i;
        int n;
        
        n = ms * LOOPS_PER_MS;
        
        // Try optimizing this away!
        i = 0;
        while (i < n) {
            i = i + 1;
        }
        
        return true;
    }
    
    public boolean eq(int a, int b) {
		return (!this.lt(a, b) && !this.lt(b, a));
	}
	
	public boolean ne(int a, int b) {
		return (!this.eq(a, b));
	}
	
    public boolean lt(int a, int b) {
		return (a < b);
    }
    
    public boolean le(int a, int b) {
		return !(!this.lt(a, b) && !this.eq(a, b));
    }
    
    public boolean gt(int a, int b) {
		return (!this.le(a, b));
    }
    
    public boolean ge(int a, int b) {
		return !(!this.gt(a, b) && !this.eq(a, b));
	}

}
