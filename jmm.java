
/* jmm.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. jmm.java */
import java.io.*;

public class jmm/* @bgen(jjtree) */ implements jmmTreeConstants, jmmConstants {/* @bgen(jjtree) */
	protected static JJTjmmState jjtree = new JJTjmmState();
	static int errors = 0;

	public static void printUsage() {
		System.out.println("Usage:  ");
		System.out.println("       java jmm <input_file.jmm>");
	}
	public static void main(String args[]) throws ParseException {
		if (args.length != 1) {
			printUsage();
			return;
		}

		FileInputStream file;
		try {
			file = new FileInputStream(args[0]);
		} catch (Exception e) {
			System.err.println("File " + args[0] + " not found");
			return;
		}

		jmm myjmm = new jmm(file);
		SimpleNode root = myjmm.Program(); // devolve referência para o nó raiz da árvore
		//root.dump(""); // imprime no ecrã a árvore

		try{
			SymbolTable ST = new SymbolTable(root);
			//ST.dump();
			root.semanticAnalysis(ST,null);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}

	static void error_skipto(int kind) throws ParseException {/* @bgen(jjtree) error_skipto */
		ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			ParseException e = generateParseException(); // generate the exception object.
			System.out.println("Error in while Statement:\u005cn" + e.toString()); // print the error message
			Token t;
			do {
				t = getNextToken();
			} while (t.kind != kind);/* @bgen(jjtree) */
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		} // The above loop consumes tokens all the way up to a token of
			// "kind". We use a do-while loop rather than a while because the
			// current token is the one immediately before the erroneous token
			// (in our case the token immediately before what should have been
			// "if"/"while".

	}

	static final public SimpleNode Program() throws ParseException {/* @bgen(jjtree) Program */
		ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			ClassDeclaration();
			jj_consume_token(0);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			{
				if ("" != null)
					return jjtn000;
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
		throw new Error("Missing return statement in function");
	}

	static final public void ClassDeclaration() throws ParseException {/* @bgen(jjtree) ClassDeclaration */
		ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t1, t2;
		try {
			try {
				jj_consume_token(CLASS);
				t1 = jj_consume_token(IDENTIFIER);
				jjtn000.class_name = t1.image;
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case EXTENDS: {
					jj_consume_token(EXTENDS);
					t2 = jj_consume_token(IDENTIFIER);
					jjtn000.extends_class = t2.image;
					break;
				}
				default:
					jj_la1[0] = jj_gen;
					;
				}
				jj_consume_token(LBRACE);
				label_1: while (true) {
					switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case BOOLEAN:
					case INT:
					case IDENTIFIER: {
						;
						break;
					}
					default:
						jj_la1[1] = jj_gen;
						break label_1;
					}
					VarDeclaration();
				}
				label_2: while (true) {
					switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case PUBLIC: {
						;
						break;
					}
					default:
						jj_la1[2] = jj_gen;
						break label_2;
					}
					jj_consume_token(PUBLIC);
					switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case STATIC: {
						MainDeclaration();
						break;
					}
					case BOOLEAN:
					case INT:
					case IDENTIFIER: {
						MethodDeclaration();
						break;
					}
					default:
						jj_la1[3] = jj_gen;
						jj_consume_token(-1);
						throw new ParseException();
					}
				}
				jj_consume_token(RBRACE);
			} catch (Exception e) {
				System.out.println("Expected Class Declaration\u005cn\u005cn" + e);
				System.exit(1);
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void VarDeclaration() throws ParseException {/* @bgen(jjtree) VarDeclaration */
		ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			try {
				Type();
				t = jj_consume_token(IDENTIFIER);
				jj_consume_token(SEMICOLON);
				jjtn000.name = t.image;
			} catch (Exception e) {
				System.out.println("Expected Var Declaration\u005cn\u005cn" + e);
				System.exit(1);
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void MainDeclaration() throws ParseException {/* @bgen(jjtree) MainDeclaration */
		ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			try {
				jj_consume_token(STATIC);
				jj_consume_token(VOID);
				jj_consume_token(MAIN);
				jj_consume_token(LPAREN);
				jj_consume_token(STRING);
				jj_consume_token(LBRACKET);
				jj_consume_token(RBRACKET);
				t = jj_consume_token(IDENTIFIER);
				jj_consume_token(RPAREN);
				jj_consume_token(LBRACE);
				jjtn000.args = t.image;
				label_3: while (true) {
					if (jj_2_1(2)) {
						;
					} else {
						break label_3;
					}
					VarDeclaration();
				}
				label_4: while (true) {
					if (jj_2_2(2)) {
						;
					} else {
						break label_4;
					}
					Statement();
				}
				jj_consume_token(RBRACE);
			} catch (Exception e) {
				System.out.println("Expected Main Declaration\u005cn\u005cn" + e);
				System.exit(1);
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void MethodDeclaration() throws ParseException {/* @bgen(jjtree) MethodDeclaration */
		ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			try {
				Type();
				t = jj_consume_token(IDENTIFIER);
				jjtn000.name = t.image;
				jj_consume_token(LPAREN);
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case BOOLEAN:
				case INT:
				case IDENTIFIER: {
					Parameters();
					break;
				}
				default:
					jj_la1[4] = jj_gen;
					;
				}
				jj_consume_token(RPAREN);
				jj_consume_token(LBRACE);
				label_5: while (true) {
					if (jj_2_3(2)) {
						;
					} else {
						break label_5;
					}
					VarDeclaration();
				}
				label_6: while (true) {
					if (jj_2_4(2)) {
						;
					} else {
						break label_6;
					}
					Statement();
				}
				Return();
				jj_consume_token(RBRACE);
			} catch (Exception e) {
				System.out.println("Expected Method Declaration\u005cn\u005cn" + e);
				System.exit(1);
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void Parameters() throws ParseException {/* @bgen(jjtree) Parameters */
		ASTParameters jjtn000 = new ASTParameters(JJTPARAMETERS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			Parameter();
			label_7: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case COMMA: {
					;
					break;
				}
				default:
					jj_la1[5] = jj_gen;
					break label_7;
				}
				jj_consume_token(COMMA);
				Parameter();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void Parameter() throws ParseException {/* @bgen(jjtree) Parameter */
		ASTParameter jjtn000 = new ASTParameter(JJTPARAMETER);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			Type();
			t = jj_consume_token(IDENTIFIER);
			jjtree.closeNodeScope(jjtn000, true);
			jjtc000 = false;
			jjtn000.name = t.image;
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void Return() throws ParseException {/* @bgen(jjtree) Return */
		ASTReturn jjtn000 = new ASTReturn(JJTRETURN);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			jj_consume_token(RETURN);
			Expression();
			jj_consume_token(SEMICOLON);
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void Type() throws ParseException {/* @bgen(jjtree) Type */
		ASTType jjtn000 = new ASTType(JJTTYPE);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			try {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case INT: {
					t = jj_consume_token(INT);
					switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
					case LBRACKET: {
						jj_consume_token(LBRACKET);
						jj_consume_token(RBRACKET);
						jjtn000.isArray = true;
						break;
					}
					default:
						jj_la1[6] = jj_gen;
						;
					}
					break;
				}
				case BOOLEAN: {
					t = jj_consume_token(BOOLEAN);
					break;
				}
				case IDENTIFIER: {
					t = jj_consume_token(IDENTIFIER);
					break;
				}
				default:
					jj_la1[7] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
				jjtn000.name = t.image;
			} catch (Exception e) {
				System.out.println("Expected Type\u005cn\u005cn" + e);
				System.exit(1);
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void Statement() throws ParseException {/* @bgen(jjtree) Statement */
		ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			try {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case LBRACE: {
					jj_consume_token(LBRACE);
					label_8: while (true) {
						switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
						case FALSE:
						case IF:
						case NEW:
						case THIS:
						case TRUE:
						case WHILE:
						case IDENTIFIER:
						case INTEGERLITERAL:
						case LPAREN:
						case LBRACE:
						case BANG: {
							;
							break;
						}
						default:
							jj_la1[8] = jj_gen;
							break label_8;
						}
						Statement();
					}
					jj_consume_token(RBRACE);
					jjtn000.type = "multiple";
					break;
				}
				case IF: {
					jj_consume_token(IF);
					jj_consume_token(LPAREN);
					Expression();
					jj_consume_token(RPAREN);
					Statement();
					jj_consume_token(ELSE);
					Statement();
					jjtn000.type = "if";
					break;
				}
				case WHILE: {
					jj_consume_token(WHILE);
					try {
						jj_consume_token(LPAREN);
						Expression();
						jj_consume_token(RPAREN);
					} catch (ParseException e) {
						error_skipto(RPAREN);
						errors++;
						if (errors == 10)
							System.exit(10);
					}
					Statement();
					jjtn000.type = "while";
					break;
				}
				default:
					jj_la1[9] = jj_gen;
					if (jj_2_5(2147483647)) {
						t = jj_consume_token(IDENTIFIER);
						ArrayAcc();
						jj_consume_token(ASSIGN);
						Expression();
						jj_consume_token(SEMICOLON);
						jjtn000.type = "[]=";
						jjtn000.identifier = t.image;
					} else if (jj_2_6(2)) {
						t = jj_consume_token(IDENTIFIER);
						jj_consume_token(ASSIGN);
						Expression();
						jj_consume_token(SEMICOLON);
						jjtn000.type = "=";
						jjtn000.identifier = t.image;
					} else {
						switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
						case FALSE:
						case NEW:
						case THIS:
						case TRUE:
						case IDENTIFIER:
						case INTEGERLITERAL:
						case LPAREN:
						case BANG: {
							Expression();
							jj_consume_token(SEMICOLON);
							break;
						}
						default:
							jj_la1[10] = jj_gen;
							jj_consume_token(-1);
							throw new ParseException();
						}
					}
				}
			} catch (Exception e) {
				System.out.println("Expected Statement\u005cn\u005cn" + e);
				System.exit(1);
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void Expression() throws ParseException {
		try {
			LT();
			label_9: while (true) {
				if (jj_2_7(2)) {
					;
				} else {
					break label_9;
				}
				jj_consume_token(SC_AND);
				ASTAND jjtn001 = new ASTAND(JJTAND);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					LT();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Expected Expression\u005cn\u005cn" + e);
			System.exit(1);
		}
	}

	static final public void LT() throws ParseException {
		Sum();
		label_10: while (true) {
			if (jj_2_8(2)) {
				;
			} else {
				break label_10;
			}
			jj_consume_token(LT);
			ASTLESS jjtn001 = new ASTLESS(JJTLESS);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				Sum();
			} catch (Throwable jjte001) {
				if (jjtc001) {
					jjtree.clearNodeScope(jjtn001);
					jjtc001 = false;
				} else {
					jjtree.popNode();
				}
				if (jjte001 instanceof RuntimeException) {
					{
						if (true)
							throw (RuntimeException) jjte001;
					}
				}
				if (jjte001 instanceof ParseException) {
					{
						if (true)
							throw (ParseException) jjte001;
					}
				}
				{
					if (true)
						throw (Error) jjte001;
				}
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, 2);
				}
			}
		}
	}

	static final public void Sum() throws ParseException {
		Mult();
		label_11: while (true) {
			if (jj_2_9(2)) {
				;
			} else {
				break label_11;
			}
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
			case PLUS: {
				jj_consume_token(PLUS);
				ASTADD jjtn001 = new ASTADD(JJTADD);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					Mult();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;
			}
			case MINUS: {
				jj_consume_token(MINUS);
				ASTSUB jjtn002 = new ASTSUB(JJTSUB);
				boolean jjtc002 = true;
				jjtree.openNodeScope(jjtn002);
				try {
					Mult();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte002;
						}
					}
					if (jjte002 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte002;
						}
					}
					{
						if (true)
							throw (Error) jjte002;
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;
			}
			default:
				jj_la1[11] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	static final public void Mult() throws ParseException {
		Literal();
		label_12: while (true) {
			if (jj_2_10(2)) {
				;
			} else {
				break label_12;
			}
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
			case STAR: {
				jj_consume_token(STAR);
				ASTMULT jjtn001 = new ASTMULT(JJTMULT);
				boolean jjtc001 = true;
				jjtree.openNodeScope(jjtn001);
				try {
					Literal();
				} catch (Throwable jjte001) {
					if (jjtc001) {
						jjtree.clearNodeScope(jjtn001);
						jjtc001 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte001 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte001;
						}
					}
					if (jjte001 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte001;
						}
					}
					{
						if (true)
							throw (Error) jjte001;
					}
				} finally {
					if (jjtc001) {
						jjtree.closeNodeScope(jjtn001, 2);
					}
				}
				break;
			}
			case SLASH: {
				jj_consume_token(SLASH);
				ASTDIV jjtn002 = new ASTDIV(JJTDIV);
				boolean jjtc002 = true;
				jjtree.openNodeScope(jjtn002);
				try {
					Literal();
				} catch (Throwable jjte002) {
					if (jjtc002) {
						jjtree.clearNodeScope(jjtn002);
						jjtc002 = false;
					} else {
						jjtree.popNode();
					}
					if (jjte002 instanceof RuntimeException) {
						{
							if (true)
								throw (RuntimeException) jjte002;
						}
					}
					if (jjte002 instanceof ParseException) {
						{
							if (true)
								throw (ParseException) jjte002;
						}
					}
					{
						if (true)
							throw (Error) jjte002;
					}
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, 2);
					}
				}
				break;
			}
			default:
				jj_la1[12] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
	}

	static final public void Literal() throws ParseException {/* @bgen(jjtree) Literal */
		ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		Token t;
		try {
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
			case INTEGERLITERAL: {
				t = jj_consume_token(INTEGERLITERAL);
				OtherLiteral();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtn000.identifier = t.image;
				break;
			}
			case TRUE: {
				jj_consume_token(TRUE);
				OtherLiteral();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtn000.identifier = "true";
				break;
			}
			case FALSE: {
				jj_consume_token(FALSE);
				OtherLiteral();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtn000.identifier = "false";
				break;
			}
			case IDENTIFIER: {
				t = jj_consume_token(IDENTIFIER);
				OtherLiteral();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtn000.identifier = t.image;
				break;
			}
			case THIS: {
				jj_consume_token(THIS);
				OtherLiteral();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtn000.identifier = "this";
				break;
			}
			case NEW: {
				jj_consume_token(NEW);
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case INT: {
					t = jj_consume_token(INT);
					ArrayAcc();
					OtherLiteral();
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtn000.identifier = "new int[...]";
					break;
				}
				case IDENTIFIER: {
					t = jj_consume_token(IDENTIFIER);
					jj_consume_token(LPAREN);
					jj_consume_token(RPAREN);
					OtherLiteral();
					jjtree.closeNodeScope(jjtn000, true);
					jjtc000 = false;
					jjtn000.identifier = "new " + t.image;
					break;
				}
				default:
					jj_la1[13] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
				break;
			}
			case BANG: {
				t = jj_consume_token(BANG);
				Expression();
				OtherLiteral();
				jjtree.closeNodeScope(jjtn000, true);
				jjtc000 = false;
				jjtn000.identifier = "!";
				break;
			}
			case LPAREN: {
				jj_consume_token(LPAREN);
				Expression();
				jj_consume_token(RPAREN);
				OtherLiteral();
				break;
			}
			default:
				jj_la1[14] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void OtherLiteral() throws ParseException {
		Token t;
		switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
		case LBRACKET: {
			ArrayAcc();
			OtherLiteral();
			ASTOtherLiteral jjtn001 = new ASTOtherLiteral(JJTOTHERLITERAL);
			boolean jjtc001 = true;
			jjtree.openNodeScope(jjtn001);
			try {
				jjtree.closeNodeScope(jjtn001, true);
				jjtc001 = false;
				jjtn001.type = "[]";
			} finally {
				if (jjtc001) {
					jjtree.closeNodeScope(jjtn001, true);
				}
			}
			break;
		}
		case DOT: {
			jj_consume_token(DOT);
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
			case LENGTH: {
				jj_consume_token(LENGTH);
				OtherLiteral();
				ASTOtherLiteral jjtn002 = new ASTOtherLiteral(JJTOTHERLITERAL);
				boolean jjtc002 = true;
				jjtree.openNodeScope(jjtn002);
				try {
					jjtree.closeNodeScope(jjtn002, true);
					jjtc002 = false;
					jjtn002.type = "length";
				} finally {
					if (jjtc002) {
						jjtree.closeNodeScope(jjtn002, true);
					}
				}
				break;
			}
			case IDENTIFIER: {
				t = jj_consume_token(IDENTIFIER);
				jj_consume_token(LPAREN);
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case FALSE:
				case NEW:
				case THIS:
				case TRUE:
				case IDENTIFIER:
				case INTEGERLITERAL:
				case LPAREN:
				case BANG: {
					MethodParams();
					break;
				}
				default:
					jj_la1[15] = jj_gen;
					;
				}
				jj_consume_token(RPAREN);
				OtherLiteral();
				ASTOtherLiteral jjtn003 = new ASTOtherLiteral(JJTOTHERLITERAL);
				boolean jjtc003 = true;
				jjtree.openNodeScope(jjtn003);
				try {
					jjtree.closeNodeScope(jjtn003, true);
					jjtc003 = false;
					jjtn003.type = "call";
					jjtn003.identifier = t.image;
				} finally {
					if (jjtc003) {
						jjtree.closeNodeScope(jjtn003, true);
					}
				}
				break;
			}
			default:
				jj_la1[16] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;
		}
		default:
			jj_la1[17] = jj_gen;

		}
	}

	static final public void MethodParams() throws ParseException {/* @bgen(jjtree) MethodParams */
		ASTMethodParams jjtn000 = new ASTMethodParams(JJTMETHODPARAMS);
		boolean jjtc000 = true;
		jjtree.openNodeScope(jjtn000);
		try {
			Expression();
			label_13: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
				case COMMA: {
					;
					break;
				}
				default:
					jj_la1[18] = jj_gen;
					break label_13;
				}
				jj_consume_token(COMMA);
				Expression();
			}
		} catch (Throwable jjte000) {
			if (jjtc000) {
				jjtree.clearNodeScope(jjtn000);
				jjtc000 = false;
			} else {
				jjtree.popNode();
			}
			if (jjte000 instanceof RuntimeException) {
				{
					if (true)
						throw (RuntimeException) jjte000;
				}
			}
			if (jjte000 instanceof ParseException) {
				{
					if (true)
						throw (ParseException) jjte000;
				}
			}
			{
				if (true)
					throw (Error) jjte000;
			}
		} finally {
			if (jjtc000) {
				jjtree.closeNodeScope(jjtn000, true);
			}
		}
	}

	static final public void ArrayAcc() throws ParseException {
		jj_consume_token(LBRACKET);
		Expression();
		jj_consume_token(RBRACKET);
	}

	static private boolean jj_2_1(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_1();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(0, xla);
		}
	}

	static private boolean jj_2_2(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_2();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(1, xla);
		}
	}

	static private boolean jj_2_3(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_3();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(2, xla);
		}
	}

	static private boolean jj_2_4(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_4();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(3, xla);
		}
	}

	static private boolean jj_2_5(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_5();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(4, xla);
		}
	}

	static private boolean jj_2_6(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_6();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(5, xla);
		}
	}

	static private boolean jj_2_7(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_7();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(6, xla);
		}
	}

	static private boolean jj_2_8(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_8();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(7, xla);
		}
	}

	static private boolean jj_2_9(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_9();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(8, xla);
		}
	}

	static private boolean jj_2_10(int xla) {
		jj_la = xla;
		jj_lastpos = jj_scanpos = token;
		try {
			return !jj_3_10();
		} catch (LookaheadSuccess ls) {
			return true;
		} finally {
			jj_save(9, xla);
		}
	}

	static private boolean jj_3R_20() {
		if (jj_scan_token(STAR))
			return true;
		if (jj_3R_29())
			return true;
		return false;
	}

	static private boolean jj_3R_32() {
		if (jj_scan_token(LBRACKET))
			return true;
		return false;
	}

	static private boolean jj_3R_48() {
		return false;
	}

	static private boolean jj_3_1() {
		if (jj_3R_14())
			return true;
		return false;
	}

	static private boolean jj_3R_47() {
		if (jj_scan_token(DOT))
			return true;
		return false;
	}

	static private boolean jj_3R_44() {
		if (jj_scan_token(INT))
			return true;
		return false;
	}

	static private boolean jj_3R_46() {
		if (jj_3R_32())
			return true;
		return false;
	}

	static private boolean jj_3R_43() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_46()) {
			jj_scanpos = xsp;
			if (jj_3R_47()) {
				jj_scanpos = xsp;
				if (jj_3R_48())
					return true;
			}
		}
		return false;
	}

	static private boolean jj_3R_18() {
		if (jj_scan_token(PLUS))
			return true;
		if (jj_3R_28())
			return true;
		return false;
	}

	static private boolean jj_3R_41() {
		if (jj_scan_token(LPAREN))
			return true;
		if (jj_3R_33())
			return true;
		return false;
	}

	static private boolean jj_3R_40() {
		if (jj_scan_token(BANG))
			return true;
		if (jj_3R_33())
			return true;
		return false;
	}

	static private boolean jj_3R_39() {
		if (jj_scan_token(NEW))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_44()) {
			jj_scanpos = xsp;
			if (jj_3R_45())
				return true;
		}
		return false;
	}

	static private boolean jj_3_10() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_20()) {
			jj_scanpos = xsp;
			if (jj_3R_21())
				return true;
		}
		return false;
	}

	static private boolean jj_3R_38() {
		if (jj_scan_token(THIS))
			return true;
		if (jj_3R_43())
			return true;
		return false;
	}

	static private boolean jj_3R_37() {
		if (jj_scan_token(IDENTIFIER))
			return true;
		if (jj_3R_43())
			return true;
		return false;
	}

	static private boolean jj_3R_36() {
		if (jj_scan_token(FALSE))
			return true;
		if (jj_3R_43())
			return true;
		return false;
	}

	static private boolean jj_3R_35() {
		if (jj_scan_token(TRUE))
			return true;
		if (jj_3R_43())
			return true;
		return false;
	}

	static private boolean jj_3_9() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_18()) {
			jj_scanpos = xsp;
			if (jj_3R_19())
				return true;
		}
		return false;
	}

	static private boolean jj_3R_45() {
		if (jj_scan_token(IDENTIFIER))
			return true;
		return false;
	}

	static private boolean jj_3R_14() {
		if (jj_3R_22())
			return true;
		if (jj_scan_token(IDENTIFIER))
			return true;
		return false;
	}

	static private boolean jj_3R_28() {
		if (jj_3R_29())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_10()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_29() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_34()) {
			jj_scanpos = xsp;
			if (jj_3R_35()) {
				jj_scanpos = xsp;
				if (jj_3R_36()) {
					jj_scanpos = xsp;
					if (jj_3R_37()) {
						jj_scanpos = xsp;
						if (jj_3R_38()) {
							jj_scanpos = xsp;
							if (jj_3R_39()) {
								jj_scanpos = xsp;
								if (jj_3R_40()) {
									jj_scanpos = xsp;
									if (jj_3R_41())
										return true;
								}
							}
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_34() {
		if (jj_scan_token(INTEGERLITERAL))
			return true;
		if (jj_3R_43())
			return true;
		return false;
	}

	static private boolean jj_3_8() {
		if (jj_scan_token(LT))
			return true;
		if (jj_3R_17())
			return true;
		return false;
	}

	static private boolean jj_3R_17() {
		if (jj_3R_28())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_9()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3_7() {
		if (jj_scan_token(SC_AND))
			return true;
		if (jj_3R_16())
			return true;
		return false;
	}

	static private boolean jj_3R_16() {
		if (jj_3R_17())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_8()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3_5() {
		if (jj_scan_token(IDENTIFIER))
			return true;
		if (jj_scan_token(LBRACKET))
			return true;
		return false;
	}

	static private boolean jj_3R_27() {
		if (jj_3R_33())
			return true;
		if (jj_scan_token(SEMICOLON))
			return true;
		return false;
	}

	static private boolean jj_3_6() {
		if (jj_scan_token(IDENTIFIER))
			return true;
		if (jj_scan_token(ASSIGN))
			return true;
		return false;
	}

	static private boolean jj_3R_33() {
		if (jj_3R_16())
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3_7()) {
				jj_scanpos = xsp;
				break;
			}
		}
		return false;
	}

	static private boolean jj_3R_26() {
		if (jj_scan_token(IDENTIFIER))
			return true;
		if (jj_3R_32())
			return true;
		return false;
	}

	static private boolean jj_3R_31() {
		if (jj_3R_15())
			return true;
		return false;
	}

	static private boolean jj_3R_25() {
		if (jj_scan_token(WHILE))
			return true;
		if (jj_scan_token(LPAREN))
			return true;
		return false;
	}

	static private boolean jj_3R_24() {
		if (jj_scan_token(IF))
			return true;
		if (jj_scan_token(LPAREN))
			return true;
		return false;
	}

	static private boolean jj_3R_23() {
		if (jj_scan_token(LBRACE))
			return true;
		Token xsp;
		while (true) {
			xsp = jj_scanpos;
			if (jj_3R_31()) {
				jj_scanpos = xsp;
				break;
			}
		}
		if (jj_scan_token(RBRACE))
			return true;
		return false;
	}

	static private boolean jj_3R_42() {
		if (jj_scan_token(LBRACKET))
			return true;
		return false;
	}

	static private boolean jj_3_4() {
		if (jj_3R_15())
			return true;
		return false;
	}

	static private boolean jj_3R_15() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_23()) {
			jj_scanpos = xsp;
			if (jj_3R_24()) {
				jj_scanpos = xsp;
				if (jj_3R_25()) {
					jj_scanpos = xsp;
					if (jj_3R_26()) {
						jj_scanpos = xsp;
						if (jj_3_6()) {
							jj_scanpos = xsp;
							if (jj_3R_27())
								return true;
						}
					}
				}
			}
		}
		return false;
	}

	static private boolean jj_3R_30() {
		if (jj_scan_token(INT))
			return true;
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_42())
			jj_scanpos = xsp;
		return false;
	}

	static private boolean jj_3_2() {
		if (jj_3R_15())
			return true;
		return false;
	}

	static private boolean jj_3R_21() {
		if (jj_scan_token(SLASH))
			return true;
		if (jj_3R_29())
			return true;
		return false;
	}

	static private boolean jj_3R_22() {
		Token xsp;
		xsp = jj_scanpos;
		if (jj_3R_30()) {
			jj_scanpos = xsp;
			if (jj_scan_token(9)) {
				jj_scanpos = xsp;
				if (jj_scan_token(27))
					return true;
			}
		}
		return false;
	}

	static private boolean jj_3R_19() {
		if (jj_scan_token(MINUS))
			return true;
		if (jj_3R_28())
			return true;
		return false;
	}

	static private boolean jj_3_3() {
		if (jj_3R_14())
			return true;
		return false;
	}

	static private boolean jj_initialized_once = false;
	/** Generated Token Manager. */
	static public jmmTokenManager token_source;
	static SimpleCharStream jj_input_stream;
	/** Current token. */
	static public Token token;
	/** Next token. */
	static public Token jj_nt;
	static private int jj_ntk;
	static private Token jj_scanpos, jj_lastpos;
	static private int jj_la;
	static private int jj_gen;
	static final private int[] jj_la1 = new int[19];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x1000, 0x8008200, 0x80000, 0x8208200, 0x8008200, 0x0, 0x0, 0x8008200, 0xbd846000,
				0x84004000, 0x39842000, 0x0, 0x0, 0x8008000, 0x39842000, 0x39842000, 0x8010000, 0x0, 0x0, };
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x2, 0x0, 0x100, 0x0, 0x100, 0xc00, 0x3000, 0x0, 0x100,
				0x100, 0x0, 0x22, 0x10, };
	}

	static final private JJCalls[] jj_2_rtns = new JJCalls[10];
	static private boolean jj_rescan = false;
	static private int jj_gc = 0;

	/** Constructor with InputStream. */
	public jmm(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public jmm(java.io.InputStream stream, String encoding) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser.  ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new jmmTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 19; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	static public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	static public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 19; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor. */
	public jmm(java.io.Reader stream) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new jmmTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 19; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	static public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 19; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Constructor with generated Token Manager. */
	public jmm(jmmTokenManager tm) {
		if (jj_initialized_once) {
			System.out.println("ERROR: Second call to constructor of static parser. ");
			System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
			System.out.println("       during parser generation.");
			throw new Error();
		}
		jj_initialized_once = true;
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 19; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	/** Reinitialise. */
	public void ReInit(jmmTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jjtree.reset();
		jj_gen = 0;
		for (int i = 0; i < 19; i++)
			jj_la1[i] = -1;
		for (int i = 0; i < jj_2_rtns.length; i++)
			jj_2_rtns[i] = new JJCalls();
	}

	static private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			if (++jj_gc > 100) {
				jj_gc = 0;
				for (int i = 0; i < jj_2_rtns.length; i++) {
					JJCalls c = jj_2_rtns[i];
					while (c != null) {
						if (c.gen < jj_gen)
							c.first = null;
						c = c.next;
					}
				}
			}
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	@SuppressWarnings("serial")
	static private final class LookaheadSuccess extends java.lang.Error {
	}

	static final private LookaheadSuccess jj_ls = new LookaheadSuccess();

	static private boolean jj_scan_token(int kind) {
		if (jj_scanpos == jj_lastpos) {
			jj_la--;
			if (jj_scanpos.next == null) {
				jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
			} else {
				jj_lastpos = jj_scanpos = jj_scanpos.next;
			}
		} else {
			jj_scanpos = jj_scanpos.next;
		}
		if (jj_rescan) {
			int i = 0;
			Token tok = token;
			while (tok != null && tok != jj_scanpos) {
				i++;
				tok = tok.next;
			}
			if (tok != null)
				jj_add_error_token(kind, i);
		}
		if (jj_scanpos.kind != kind)
			return true;
		if (jj_la == 0 && jj_scanpos == jj_lastpos)
			throw jj_ls;
		return false;
	}

	/** Get the next Token. */
	static final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	static final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	static private int jj_ntk_f() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	static private int[] jj_expentry;
	static private int jj_kind = -1;
	static private int[] jj_lasttokens = new int[100];
	static private int jj_endpos;

	static private void jj_add_error_token(int kind, int pos) {
		if (pos >= 100)
			return;
		if (pos == jj_endpos + 1) {
			jj_lasttokens[jj_endpos++] = kind;
		} else if (jj_endpos != 0) {
			jj_expentry = new int[jj_endpos];
			for (int i = 0; i < jj_endpos; i++) {
				jj_expentry[i] = jj_lasttokens[i];
			}
			jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
				int[] oldentry = (int[]) (it.next());
				if (oldentry.length == jj_expentry.length) {
					for (int i = 0; i < jj_expentry.length; i++) {
						if (oldentry[i] != jj_expentry[i]) {
							continue jj_entries_loop;
						}
					}
					jj_expentries.add(jj_expentry);
					break jj_entries_loop;
				}
			}
			if (pos != 0)
				jj_lasttokens[(jj_endpos = pos) - 1] = kind;
		}
	}

	/** Generate ParseException. */
	static public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[46];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 19; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 46; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		jj_endpos = 0;
		jj_rescan_token();
		jj_add_error_token(0, 0);
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	static final public void enable_tracing() {
	}

	/** Disable tracing. */
	static final public void disable_tracing() {
	}

	static private void jj_rescan_token() {
		jj_rescan = true;
		for (int i = 0; i < 10; i++) {
			try {
				JJCalls p = jj_2_rtns[i];
				do {
					if (p.gen > jj_gen) {
						jj_la = p.arg;
						jj_lastpos = jj_scanpos = p.first;
						switch (i) {
						case 0:
							jj_3_1();
							break;
						case 1:
							jj_3_2();
							break;
						case 2:
							jj_3_3();
							break;
						case 3:
							jj_3_4();
							break;
						case 4:
							jj_3_5();
							break;
						case 5:
							jj_3_6();
							break;
						case 6:
							jj_3_7();
							break;
						case 7:
							jj_3_8();
							break;
						case 8:
							jj_3_9();
							break;
						case 9:
							jj_3_10();
							break;
						}
					}
					p = p.next;
				} while (p != null);
			} catch (LookaheadSuccess ls) {
			}
		}
		jj_rescan = false;
	}

	static private void jj_save(int index, int xla) {
		JJCalls p = jj_2_rtns[index];
		while (p.gen > jj_gen) {
			if (p.next == null) {
				p = p.next = new JJCalls();
				break;
			}
			p = p.next;
		}
		p.gen = jj_gen + xla - jj_la;
		p.first = token;
		p.arg = xla;
	}

	static final class JJCalls {
		int gen;
		Token first;
		int arg;
		JJCalls next;
	}

}
